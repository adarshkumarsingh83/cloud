Note: to enable Custom tcp with 8080 port in security tab with access anywhere option 

$ chmod 400 adarsh.pem

$ ssh -i "adarsh.pem" ec2-user@e<publid-ip>.us-east-2.compute.amazonaws.com

#changing to the super user
$ sudo -s 

#updating the os 
$ sudo yum update -y 

$ sudo amazon-linux-extras enable corretto8

$ sudo yum clean metadata

$ sudo yum install -y java-1.8.0-amazon-corretto

$ java -version

$ mkdir application

$ chmod 777 application 

$ cd application

#Note spring application is in the programs dir in amazon java app
springboot-web-rest

$ scp -i <---xxx.pem---> <----SrcFileName--> ec2-user@<-----PUBLIC-DNS---->:/home/ec2-user/<--DestinationDir->/
$ scp -i adarsh.pem springboot-web-rest.jar ec2-user@ec2-34-219-71-48.us-west-2.compute.amazonaws.com:/home/ec2-user/application/

$ chmod 777 springboot-espark.jar 

# To start the application 
$ java -jar springboot-espark.jar 

# To test service 
$ curl http://34.219.71.48:8080/api/message

#Create a backup image of the instance 
1.select the instance right click on that 
image-> create-image-> provide image name -> click on create image button 

# create a new instance by selecting the instance backup 
select -> my image -> rest process is same 

# move inside the application dir 
$ cd application

#start the server inside 
# To start the application 
$ java -jar springboot-espark.jar 

#Load balancer 
#Create a classic load balancer 

#Step 1 Basic Configuration
#In port forwarding 
select tcp 8080 for inbound and select tcp 8080 for forwarding port 

# Step 2: Assign Security Groups
#In security step 
Select an existing security group
select both default security for vpc and security group of the ec2 instances 

#Step 4: Configure Health Check
change the Healthy threshold to less value so that lb will come up early 

rest steps will be normal 

#use the cmd line curl to avoid browser cache 
$ curl http://<dns of the lb>:8080/api/message
